@isTest
private class BookingTriggerTest {
    @isTest
    static void testTriggerCreatesPaymentAndGuestsWithUpdatedFields() {
        // Create a test Customer Info
        Customer_Info__c customer = new Customer_Info__c(
            Name = 'John Doe',
            Email__c = 'john.doe@example.com',
            Phone__c = '0917123456',
            Country__c = 'Philippines',
            City__c = 'Angeles City',
            Date_Of_Birth__c = Date.newInstance(1990, 1, 1)
        );
        insert customer;

        // Create a test Travel Package
        TravelPackage__c packageRec = new TravelPackage__c(
            Name = 'Asian Getaway',
            Country__c = 'Philippines',
            Price_Per_Person__c = 1500,
            Duration_in_Days__c = 5,
            Availability_Status__c = 'Active',
            Package_Type__c = 'Family',
            Region__c = 'Philippines',
            Places_Covered__c = 'Cebu'
        );
        insert packageRec;

        // Create a test Booking record
        Booking__c booking = new Booking__c(
            Number_of_Travelers__c = 3,
            Booking_Status__c = 'Pending',
            Travelling_Start_Date__c = Date.today().addDays(7),
            TravelPackage__c = packageRec.Id,
            Membership__c = 'Gold',
            Preferred_Accommodation__c = 'Guest House',
            Customer__c = customer.Id,
            Customer_Email__c = customer.Email__c,
            Booking_Date__c = Date.newInstance(2025, 7, 23)
        );

        Test.startTest();
        insert booking;
        Test.stopTest();

        // Validate Booking Payment creation
        List<Booking_Payment__c> payments = [
            SELECT Id, Booking__c, Payment_Status__c, Total_Bill_Amount__c
            FROM Booking_Payment__c
            WHERE Booking__c = :booking.Id
        ];
        System.assertEquals(1, payments.size(), 'One payment record should be created.');
        System.assertEquals('Pending', payments[0].Payment_Status__c, 'Payment status should default to Pending.');

        // Validate Booking Guests creation
        List<BookingGuest__c> guests = [
            SELECT Id, Booking__c, Name, Gender__c
            FROM BookingGuest__c
            WHERE Booking__c = :booking.Id
        ];
        System.assertEquals(3, guests.size(), 'Three guests should be created for 3 travelers.');
        System.assertEquals('Guest 1', guests[0].Name, 'First guest name should follow naming pattern.');
    }
    
    @isTest
static void testBookingConfirmationEmailIsSent() {
    // Step 1: Create test Customer Info
    Customer_Info__c customer = new Customer_Info__c(
        Name = 'Jane Smith',
        Email__c = 'jane.smith@example.com',
        Phone__c = '0999123456',
        Country__c = 'Philippines',
        City__c = 'Quezon City',
        Date_Of_Birth__c = Date.newInstance(1985, 5, 5)
    );
    insert customer;

    // Step 2: Create test Travel Package
    TravelPackage__c packageRec = new TravelPackage__c(
        Name = 'Island Adventure',
        Country__c = 'Philippines',
        Price_Per_Person__c = 1800,
        Duration_in_Days__c = 4,
        Availability_Status__c = 'Active',
        Package_Type__c = 'Adventure',
        Region__c = 'Philippines',
        Places_Covered__c = 'Palawan'
    );
    insert packageRec;

    // Step 3: Create test Booking with status 'Pending'
    Booking__c booking = new Booking__c(
        Number_of_Travelers__c = 2,
        Booking_Status__c = 'Pending',
        Travelling_Start_Date__c = Date.today().addDays(5),
        TravelPackage__c = packageRec.Id,
        Membership__c = 'Basic',
        Preferred_Accommodation__c = 'Hotel',
        Customer__c = customer.Id,
        Customer_Email__c = customer.Email__c,
        Booking_Date__c = Date.today()
    );
    insert booking;

    // Step 4: Update status to 'Confirmed' to trigger the email future method
    booking.Booking_Status__c = 'Confirmed';

    Test.startTest();
    update booking;
    Test.stopTest();

    // No exception = Pass
    System.assert(true, 'Future method executed without exceptions.');
}

}